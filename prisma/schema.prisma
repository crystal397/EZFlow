//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@allow('all', true)
model Workflow {
  id                 String              @id() @default(uuid())
  name               String
  description        String?
  organizationId     String
  organization       Organization?       @relation(fields: [organizationId], references: [id], name: "organization")
  workflowSteps      WorkflowStep[]      @relation("workflow")
  workflowExecutions WorkflowExecution[] @relation("workflow")
  dateCreated        DateTime            @default(now())
  dateUpdated        DateTime            @default(now()) @updatedAt()
}

/// @@allow('all', true)
model WorkflowStep {
  id          String    @id() @default(uuid())
  name        String
  description String?
  order       Float
  workflowId  String
  workflow    Workflow? @relation(fields: [workflowId], references: [id], name: "workflow")
  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model WorkflowExecution {
  id          String    @id() @default(uuid())
  status      String
  startedAt   String?
  completedAt String?
  workflowId  String
  workflow    Workflow? @relation(fields: [workflowId], references: [id], name: "workflow")
  userId      String
  user        User?     @relation(fields: [userId], references: [id], name: "user")
  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Integration {
  id             String        @id() @default(uuid())
  name           String
  type           String
  config         String?
  organizationId String
  organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  dateCreated    DateTime      @default(now())
  dateUpdated    DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model ApiKey {
  id             String        @id() @default(uuid())
  key            String
  name           String
  expiresAt      String?
  userId         String
  user           User?         @relation(fields: [userId], references: [id], name: "user")
  organizationId String
  organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  dateCreated    DateTime      @default(now())
  dateUpdated    DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Subscription {
  id             String        @id() @default(uuid())
  planName       String
  status         String
  startDate      String
  endDate        String?
  organizationId String
  organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  billings       BillingData[] @relation("subscription")
  dateCreated    DateTime      @default(now())
  dateUpdated    DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model BillingData {
  id             String        @id() @default(uuid())
  amount         String
  currency       String
  status         String
  billingDate    String
  paidAt         String?
  subscriptionId String
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id], name: "subscription")
  dateCreated    DateTime      @default(now())
  dateUpdated    DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', roles?[user == auth() && name == 'owner'])
/// @@allow('read', roles?[user == auth()])
model Organization {
  id               String             @id() @default(uuid())
  name             String
  pictureUrl       String?            @default("https://i.imgur.com/BgkFiid.jpeg")
  stripeCustomerId String?
  dateCreated      DateTime           @default(now())
  dateUpdated      DateTime           @default(now()) @updatedAt()
  roles            OrganizationRole[]
  workflows        Workflow[]         @relation("organization")
  integrations     Integration[]      @relation("organization")
  apiKeys          ApiKey[]           @relation("organization")
  subscriptions    Subscription[]     @relation("organization")
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', organization.roles?[user == auth() && name == 'owner'])
/// @@allow('create', organization.roles?[user == auth()] && name != 'owner')
/// @@allow('read', organization.roles?[user == auth()])
/// @@allow('delete', auth() == user)
model OrganizationRole {
  id             String       @id() @default(uuid())
  name           String
  dateCreated    DateTime     @default(now())
  dateUpdated    DateTime     @default(now()) @updatedAt()
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                 String              @id() @default(uuid())
  name               String?
  email              String?             @unique()
  pictureUrl         String?             @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation    String?
  emailVerified      Boolean?
  stripeCustomerId   String?
  status             UserStatus          @default(VERIFIED)
  globalRole         String              @default("USER")
  /// @password
  /// @omit
  password           String?
  dateCreated        DateTime            @default(now())
  dateUpdated        DateTime            @default(now()) @updatedAt()
  accounts           Account[]
  sessions           Session[]
  organizationRoles  OrganizationRole[]
  workflowExecutions WorkflowExecution[] @relation("user")
  apiKeys            ApiKey[]            @relation("user")
}

/// @@allow('all', auth().id == user.id)
model Account {
  id                       String  @id() @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

/// @@allow('all', auth().id == user.id)
model Session {
  id           String   @id() @default(uuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
